<?php
$path = drupal_get_path('module', 'govi_sdqs');
require_once DRUPAL_ROOT . "/$path/handlers/sdqs_handler.inc";

// Definición del bloque

function govi_sdqs_block_info() {
    $block = array();

    $block['govi_sdqs_block'] = array(
        'info' => 'Govi SDQS',
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );
    return $block;
}

function govi_sdqs_block_view($delta = '') {

    $block = array();

    $block['subject'] = 'Servicio al ciudadano';
    $block['content'] = govi_sdqs_block_content();

    return $block;
}

function govi_sdqs_block_content() {

        return theme('govi_sdqs_display');
}

// Manejador de templates del módulo
function govi_sdqs_theme($existing, $type, $theme, $path) {

    return array(
        'govi_sdqs_display' => array(
            'template' => 'templates/sdqs',
        ),

        'govi_sdqs_form' => array(
            'render element' => 'form',
            'template' => 'templates/form',
        ),
    );
}

function theme_govi_sdqs_form ($variables) {

    drupal_flush_all_caches();
    $form = $variables['form'];
    return $form;
}

/**
* Implements hook_menu().
*/
function govi_sdqs_menu() {


  $items['admin/config/services/sdqs'] = array(
    'title' => 'Cliente SDQS',
    'description' => 'Configuración del Cliente SOAP del Sistema Distrital de Quejas y Soluciones. Bogotá te escucha.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govi_sdqs_admin_connection'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/govi-sdqs.admin.connection.inc',
    'weight' => 1
  );
  $items['admin/config/services/sdqs/connection'] = array(
    'title' => 'Conexión',
    'description' => 'Configuración del Cliente SOAP del Sistema Distrital de Quejas y Soluciones. Bogotá te escucha.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govi_sdqs_admin_connection'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/govi-sdqs.admin.connection.inc',
    'weight' => 2
  );
  $items['admin/config/services/sdqs/configure'] = array(
    'title' => 'Configuración',
    'description' => 'Configuración del Cliente SOAP del SDQS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govi_sdqs_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/govi-admin.config.inc.php',
    'weight' => 3
  );
  $items['admin/config/service-sdqs-update'] = array(
      'page callback' => 'govi_sdqs_batch_update_data',
      'access arguments' => array('administer users'),

    );
  $items['govi-sdqs/crear'] = array(
    'title' => 'Crear petición',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govi_sdqs_crear_peticion_form'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Batch update callback.
 */
function govi_sdqs_batch_update_data() {
  $batch = array(
    'operations' => array(),
    'finished' => 'govi_sdqs_batch_update_data_finished',
    'title' => t('Obteniendo información del servicio web'),
    'init_message' => t('El proceso está comenzando...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Se  ha presentado un error')
  );
  $results = array(
    "updateEntities",
    "updateCountries",
    "updateRequestTypes",
    "updateIdentificationTypes",
    "updateComplaintType",
    "updateDepartments",
    "updateCities",
    "updateGenres",
    "updateSectors"
  );
  foreach ($results as $result) {
    $batch['operations'][] = array('govi_sdqs_batch_update_data_process', array($result));
  }
  $sdqs = SdqsClient::getInstance();
  batch_set($batch);
  batch_process('/admin/config/services/sdqs/configure'); // The path to redirect to when done.
}

/**
 * Batch processor.
 */
function govi_sdqs_batch_update_data_process($method, &$context) {
  $sdqs =  SdqsClient::getInstance();
  $sdqs->$method();

  $context['message'] = "Obteniendo información $method...";
}

/**
 * The batch finish handler.
 */
function govi_sdqs_batch_update_data_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('La actualización de datos se ha completado');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
  drupal_set_message('Actualización de datos exitosa');
}



function govi_sdqs_crear_peticion_form($form, &$form_state) {

    $form = array();

    $form['#theme'] = 'govi_sdqs_form';

    $form['#prefix'] = '<div id="govi-sdqs-form-container">';
    $form['#suffix'] = '</div>';

    $temas = variable_get('govi_sdqs_lista_tema');
    $entidades = variable_get('govi_sdqs_lista_entidades');
    $tipos_peticion = variable_get('sdqs_complaint_types');
    $tipos_id = variable_get('sdqs_identification_types');
    $paises = variable_get('govi_sdqs_lista_paises');
    $genres = variable_get('sdqs_genres');
    $departamentos = variable_get('sdqs_departments');
    $path = drupal_get_path('module', 'govi_sdqs');
    $css = $path . '/assets/css/govi-sdqs-form.css';
    $js = $path . '/assets/js/govi-sdqs-form.js';
    drupal_add_js($js);
    drupal_add_css($css);
    $form['datos_personales'] = array(
        '#type' => 'fieldset',
        '#title' => 'Datos persona natural',
        '#weight' => -1,
        '#validated' => True,
    );
    $form['datos_personales']['tipo_solicitante'] = array(
        '#type' => 'select',
        '#title' => 'Tipo de solicitante',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#options' => Array(#options' => array(
          'natural' => t('Persona Natural'),
          'juridica' => t('Persona Jurídica'),
          'infantil' => t('Niños, niñas y adolescentes'),
          'apoderado' => t('Apoderado'),
          'anonimo' => t('Persona Anónima'),

       ),
        '#default_value' => 'natural',
    );
    $form['datos_personales']['nombre'] = array(
        '#type' => 'textfield',
        '#title' => 'Nombre',
        '#description' => 'Ingrese su primer nombre',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#size' => 60,
    );

    $form['datos_personales']['apellido'] = array(
        '#type' => 'textfield',
        '#title' => 'Apellido',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#description' => 'Ingrese su primer apellido',
        '#size' => 60
    );



    $form['datos_personales']['tipo_identificacion'] = array(
        '#type' => 'select',
        '#title' => 'Tipo de identificación',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#options' => $tipos_id,
        '#default_value' => 'CC',
        '#required' => TRUE
    );
    $form['datos_personales']['genero'] = array(
        '#type' => 'select',
        '#title' => 'Género',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#options' => $genres,
        '#required' => TRUE,
    );
    $form['datos_personales']['numero_identificacion'] = array(
        '#type' => 'textfield',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#title' => 'Numero identificación',
    );

    $form['datos_personales']['correo_electronico'] = array(
        '#type' => 'textfield',
        '#title' => 'Correo electrónico',
        '#attributes' => array('class' => array('pure-u-23-24')),
    );
    $form['datos_personales']['razon_social'] = array(
        '#type' => 'textfield',
        '#title' => 'Razón social',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#required' => FALSE
    );
    $opts_pais = array();


    $form['datos_personales']['pais'] = array(
        '#type' => 'select',
        '#title' => 'País',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#options' => Array(169 => 'Colombia'),
        '#default_value' => 169,
        '#attributes' => array('style' => 'display:none'),
        '#required' => TRUE
    );

    $form['datos_personales']['departamento'] = array(
        '#type' => 'select',
        '#title' => 'Departamento',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#options' => $departamentos,
        '#ajax' => array(
            'event' => 'change',
            'effect' => 'fade',
            'callback' => 'govi_sdqs_obtener_info_ciudades',
            'method' => 'replace',
            'wrapper' => 'wrapper-ciudades',
        ),
        '#default_value' => 11,
        '#validated' => TRUE,
    );

    $sdqs =  SdqsClient::getInstance();
    $form['datos_personales']['ciudad'] = array(
        '#type' => 'select',
        '#prefix' => '<div id="wrapper-ciudades">',
        '#suffix' => '</div>',
        '#title' => 'Municipio/Ciudad',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#options' => Array( 11001 => 'Bogotá D.C.'),
        '#validated' => TRUE,

    );
    $form['datos_personales']['direccion'] = array(
        '#type' => 'textfield',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#title' => 'Dirección',
    );
    $form['datos_personales']['telefono_fijo'] = array(
        '#type' => 'textfield',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#title' => 'Teléfono Fijo',
    );
    $form['datos_personales']['telefono_movil'] = array(
        '#type' => 'textfield',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#title' => 'Teléfono Móvil',
    );


    $form['pqr_crear'] = array(
        '#type' => 'fieldset',
        '#title' => 'Solicitud',
    );

    $opts_peticion = array();

    $form['pqr_crear']['tipo_peticion'] = array(
      '#type' => 'select',
      '#title' => 'Tipo de petición',
      '#attributes' => array('class' => array('pure-u-23-24')),
      '#options' => $tipos_peticion,
      '#required' => TRUE
    );




    // TODO: implementar autocomletado controlado desde el cliente
    // con JavaScript


    $form['pqr_crear']['asunto'] = array(
        '#type' => 'textarea',
        '#title' => 'Contenido de la solicitud',
        '#cols' => 30,
        '#attributes' => array('class' => array('pure-u-1')),
        '#required' => TRUE,
    );

    $form['pqr_crear']['archivo'] = array(
        '#type' => 'managed_file',
        '#title' => 'Archivos o documentos',
        '#attributes' => array('class' => array('pure-u-23-24')),
    );
    $opts_respuesta = array('email'=>'Correo electrónico','correspondencia'=>'Correo físico');
    $form['pqr_crear']['respuesta'] = array(
        '#type' => 'select',
        '#title' => 'Medio de respuesta',
        '#description' => '¿Cómo deseas recibir la respuesta?',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#options' => !empty($opts_respuesta) ? $opts_respuesta : array(),
        '#default_value' => 'email',
    );

    $form['pqr_crear']['terminos_habeas_data'] = array(
        '#type' => 'checkbox',
        '#title' => 'He leído y estoy de acuerdo con los términos y condiciones de uso de datos, implementados por la Secretaria General de la Alcaldía Mayor de Bogotá D.C resolución 070 de 2017 (Febrero 2017). ',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#return_value' => 'Sí',
        '#default_value' => 0,
    );

    $form['pqr_crear']['terminos_correo'] = array(
        '#type' => 'checkbox',
        '#title' => 'Certifico que el correo electrónico ingresado en mis datos personales se encuentra vigente, de igual manera autorizo al Sistema Distrital de Queja y Soluciones para el envío de la respuesta a mi solicitud por este medio. Se informa que el uso del SDQS y de lo referente a transacciones del sistema, no generan ningún costo asociado; salvo lo contenido en lo que se determine en cualquier entidad distrital en el link de transparencia y acceso a la información pública: Instrumentos de gestión de información pública, (8 costos de reproducción).
',
        '#attributes' => array('class' => array('pure-u-23-24')),
        '#return_value' => 'Sí',
        '#default_value' => 0,
    );
    $form['captcha'] = array(
        '#type' => 'captcha',
        //'#captcha_type' => 'captcha/Math',
        // Utilice este tipo para sitios en producción */
        '#captcha_type' => 'recaptcha/reCAPTCHA',
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Enviar',
        '#ajax' => array(
            'callback' => 'govi_sdqs_crear_peticion_ajax_submit',
            'wrapper' => 'govi-sdqs-form-container',
            'method' => 'replaceWith',
            'effect' => 'fade',
        ),
        '#attributes' => array(
            'class' => array(
                'pure-button',
                'pure-button-primary'
            ),
        ),
    );

    $form['#attributes']['class'][] = 'pure-form';
    $form['#attributes']['class'][] = 'pure-form-stacked';

    return $form;
}
function govi_sdqs_crear_peticion_form_validate($form, &$form_state) {

    $nombre = $form_state['values']['nombre'];
    $apellido = $form_state['values']['apellido'];
    $tipo_solicitante = $form_state['values']['tipo_solicitante'];
    $tipo_peticion = $form_state['values']['tipo_peticion'];
    $correo_electronico = $form_state['values']['correo_electronico'];

    $ciudad = $form_state['values']['ciudad'];

    $tipo_identificacion = $form_state['values']['tipo_identificacion'];
    $numero_identificacion = $form_state['values']['numero_identificacion'];

    $telefono_fijo = $form_state['values']['telefono_fijo'];
    $telefono_movil = $form_state['values']['telefono_movil'];
    $direccion = $form_state['values']['direccion'];
    $terminos1=$form_state['values']['terminos_habeas_data'];
    $terminos2=$form_state['values']['terminos_correo'];
    //Si el tipo de petición es un usuario anónimo
    if(!empty($tipo_solicitante) && $tipo_solicitante=='anonimo'  ) {


    } else {
        if($tipo_identificacion =='NI' && !preg_match("/([0-9]).*.-([0-9])/",$numero_identificacion)) {
            form_set_error('tipo_identificacion','Número de NIT inválido. Use el formato : 123456789-3');
        }
        if(!empty($telefono_fijo) && strlen($telefono_fijo) < 7 ) {
            form_set_error('telefono_fijo','El número de teléfono fijo debe tener al menos 7 dígitos');
        }
        if(!empty($telefono_movil) && strlen($telefono_movil) < 10 ) {
            form_set_error('telefono_movil','El número de teléfono móvil debe tener al menos 10 dígitos');
        }
      if(empty($nombre)) {
        form_set_error('nombre','El campo Nombre es requerido.');
      }
      if(empty($apellido)) {
        form_set_error('apellido','El campo Apellido es requerido.');
      }
      if(empty($correo_electronico)) {
        form_set_error('correo_electronico','El campo Correo electrónico es requerido.');
      }
      if(empty($tipo_identificacion)) {
        form_set_error('tipo_identificacion','El campo Tipo de identificación es requerido.');
      }
      if(empty($numero_identificacion)) {
        form_set_error('numero_identificacion','El campo Número identificación es requerido.');
      }
      if(empty($telefono_fijo)) {
        form_set_error('telefono_fijo','El campo Teléfono fijo es requerido.');
      }
      if(empty($telefono_movil)) {
        form_set_error('telefono_movil','El campo Teléfono móvil es requerido.');
      }
      if(empty($direccion)) {
        form_set_error('direccion','El campo Dirección es requerido.');
      }
      if(empty($terminos1)) {
        form_set_error('terminos_habeas_data','El campo Términos y condiciones es requerido.');
      }
      if(empty($terminos2)) {
        form_set_error('terminos_correo','El campo Términos y condiciones correo es requerido.');
      }
    }


    if(empty($tipo_peticion)) {
      form_set_error('tipo_peticion','El campo Tipo de petición es requerido.');
    }
    if(empty($tipo_solicitante)) {
      form_set_error('tipo_solicitante','El campo Tipo de solicitante es requerido.');
    }
    if(!empty($correo_electronico) && !valid_email_address($correo_electronico)  ) {
      form_set_error('correo_electronico','El correo electrónico debe ser una dirección de correo válida.');
    }





}

function govi_sdqs_crear_peticion_ajax_submit($form, &$form_state) {

    global $base_url;
    $output = '';

    $codigo_dependencia = variable_get('govi_sdqs_dependency');
    $codigo_entidad = variable_get('govi_sdqs_entity');
    $id_sector = variable_get('sdqs_sector');
    $codigo_tema = variable_get('sdqs_theme');




    if ($form_state['executed']) {

        $nid_log = govi_sdqs_create_log_node();

        $service = wsclient_service_load('service_radicacion_canal');
        $tipo_solicitante = $form_state['values']['tipo_solicitante'];

        $obs = '';

        $obs .= 'Este requerimiento ha sido realizado a través del módulo Govi SDQS ';
        $obs .= 'de la Distribución Distrital CMS. Los datos de identificación del sitio ';
        $obs .= 'web son los siguientes:' . PHP_EOL;
        $obs .= 'Nombre de dominio: ' . $base_url . PHP_EOL;

        if(!empty($tipo_solicitante) && $tipo_solicitante!='anonimo'  ) {
            $obs .= 'Direccion IP: ' . ip_address() . PHP_EOL;
            $obs .= 'Tipo de Solicitante: ' . $form_state['values']['tipo_solicitante'] . PHP_EOL;

            if(!empty($form_state['values']['razon_social'])) {
              $obs .= 'Razón Social: ' . $form_state['values']['razon_social'] . PHP_EOL;
            }
            $obs .= 'Medio de Respuesta: ' . $form_state['values']['respuesta'] . PHP_EOL;
            $obs .= 'Dirección: ' . $form_state['values']['direccion'] . PHP_EOL;
            $obs .= 'Teléfono: ' . $form_state['values']['telefono_fijo'] . PHP_EOL;
            $obs .= 'Teléfono móvil: ' . $form_state['values']['telefono_movil'] . PHP_EOL;

            $obs .= 'Correo electrónico: ' . $form_state['values']['correo_electronico'] . PHP_EOL;
            $obs .= 'Términos y condiciones: ' . $form_state['values']['terminos_habeas_data'] . PHP_EOL;
            $obs .= 'Términos y condiciones correo: ' . $form_state['values']['terminos_correo'] . PHP_EOL;
        }

        $data = array(
            'parameters' => array(
                'datos' => array(
                    'asunto' => $form_state['values']['asunto'],
                    'codigoTipoRequerimiento' => $form_state['values']['tipo_peticion'],
                    'entidadQueIngresaRequerimiento' => variable_get('govi_sdqs_entity'),
                    'codigoCanal' => 1,
                    'observaciones' => $obs,
                    'confirmacionEmail' => false,
                    'codigoTipoPersona' => 1,
                    'terminosCondiciones' => 1,
                    'codigoOpcion' => 1,

                ),

            ),
        );

        //if(!empty( variable_get('govi_sdqs_theme') )){
          //$data['parameters']['datos']['codigoTema']= variable_get('govi_sdqs_theme');
        //}
        $data['parameters']['datos']['fechaNacimiento']= '1992-05-15T19:58:31.319-05:00';

        if(!empty($form_state['values']['tipo_solicitante']) || $form_state['values']['tipo_solicitante'] == 'natural') {
          $data['parameters']['datos']['codigoTipoPersona']= 1;

        } else {
          $data['parameters']['datos']['codigoTipoPersona']= 2;

        }

        if(!empty($form_state['values']['apellido'])){
          $data['parameters']['datos']['primerApellido']= $form_state['values']['apellido'];

        }
        if(!empty($form_state['values']['nombre'])){
          $data['parameters']['datos']['primerNombre']= $form_state['values']['nombre'];
        }
        if(!empty($form_state['values']['genero'])){
          $data['parameters']['datos']['codigoGenero']= $form_state['values']['genero'];
        }
        if(!empty($form_state['values']['genero'])){
          $data['parameters']['datos']['codigoTipoIdentificacion']= $form_state['values']['tipo_identificacion'];
        }
        if(!empty($form_state['values']['numero_identificacion'])){
          $data['parameters']['datos']['numeroDocumento']= $form_state['values']['numero_identificacion'];
        }
        if(!empty($form_state['values']['apellido'])){
          $data['parameters']['datos']['apellidos']= $form_state['values']['apellido'];
        }
        if(!empty($form_state['values']['correo_electronico'])){
          $data['parameters']['datos']['email']= $form_state['values']['correo_electronico'];
        }
        if(!empty($form_state['values']['ciudad'])){
          $data['parameters']['datos']['codigoCiudad']= $form_state['values']['ciudad'];
        }
        if(!empty($form_state['values']['pais'])){
          $data['parameters']['datos']['codigoPais']= $form_state['values']['pais'];
        }
        if(!empty($form_state['values']['departamento'])){
          $data['parameters']['datos']['codigoDepartamento']= $form_state['values']['departamento'];
        }

        if(!empty($form_state['values']['telefono_fijo'])){
          $data['parameters']['datos']['telefonoCasa']= $form_state['values']['telefono_fijo'];
          $data['parameters']['datos']['telefonoOficina']= $form_state['values']['telefono_fijo'];
          $data['parameters']['datos']['pbx']= $form_state['values']['telefono_fijo'];
        }
        if(!empty($form_state['values']['telefono_movil'])){
          $data['parameters']['datos']['telefonoCelular']= $form_state['values']['telefono_movil'];
        }

        if(!empty($form_state['values']['telefono_movil'])){
          $data['parameters']['datos']['telefonoCelular']= $form_state['values']['telefono_movil'];
        }
        if(!empty($form_state['values']['direcion'])){
            $data['parameters']['datos']['direccionResidencia']= $form_state['values']['direccion'];
        }
        if($codigo_dependencia!=0){
          $data['parameters']['datos']['codigoDependencia']= $codigo_dependencia;
        }
        if($id_sector!=0){
          $data['parameters']['datos']['codigoSector']= $id_sector;
        }


        //Si el tipo de documento es NIT se agrega el dígito de verificación
        if($form_state['values']['tipo_identificacion']=='NI'){
          $identificacion = explode("-",$form_state['values']['numero_identificacion']);
          $data['parameters']['datos']['numeroDocumento']= $identificacion[0];
          $data['parameters']['datos']['digitoVerificacion']= $identificacion[1];
        }
        $fid=0;
        if(empty($form_state['values']['archivo']) && !empty($_POST['archivo'])){
          $fid=$_POST['archivo']['fid'];
	} else {
          $fid = $form_state['values']['archivo'];
	}
        if (!empty($fid)) {
            $data['parameters']['requerimiento']['documento'] = array();
            $file = file_load($fid);
            $content = file_get_contents(file_directory_temp().'/'.$file->filename);

            $data['parameters']['datos']['documentos']['contenidoDocumento'] = base64_encode($content);
            $data['parameters']['datos']['documentos']['codigoTipoArchivo'] = 16;
            $data['parameters']['datos']['documentos']['nombreArchivo'] = $file->filename;
        }

        try {
            $sdqs = SdqsClient::getInstance();
            $result = $sdqs->register($data);

            if( !empty($result->return->codigoError) && $result->return->codigoError > 0){
              $output .= '<h3>Se ha presentado un error</h3>';
              $output .= '<p>'.$result->return->descripcion.'</p>';
              //govi_sdqs_log_event($form_state, $nid_log, $result);

            } else {
                $output .= '<h3>¡Solicitud enviada con éxito!</h3>';
                $output .= '<p>Respetado(a) ' .$form_state['values']['nombre']. ', por favor tome nota de los siguientes ';
                $output .= 'datos para hacer seguimiento a su petición.' . PHP_EOL;
                $output .= 'Esta información ha sido enviada al correo electrónico si fué registrado previamente: ' . $form_state['values']['correo_electronico'];
                $output .= '<hr/>';
                $output .= '<ul><li>Fecha de solicitud: ' . $result->return->fechaCreacion . '</li>';
                $output .= '<li>Codigo de requerimiento SDQS: ' . $result->return->codigoRequerimiento . '</li>';
                $output .= '<br>';
                $output .= 'Si es una solicitud anónima puede hacer seguimiento a través de la dirección <a href="http://sdqs.bogota.gov.co/sdqs/publico/hojaRuta/?language=es">Consultar hoja de ruta</a>';

                govi_sdqs_log_event($form_state, $nid_log, $result);
            }
        } catch (WSClientException $exception) {

            $output .= '<h3>Ha ocurrido un error inesperado</h3>';
            $output .= '<p>Comuníquese con el administrador o ingrese directamente a </br> </br><a href="http://sdqs.bogota.gov.co/sdqs/publico/registrarPeticion/?language=es">Registrar Petición</a> </p>';

            print $exception->__toString();
            watchdog('govi_sdqs', $exception->__toString());
            //govi_sdqs_log_event($form_state, $nid_log, $result, $exception);

        }

    } else {

        $output = $form;
    }

    return $output;
}

/**
 * Método que crea el nodo que almacenará
 * los detalles de la petición. Inicialmente es creado
 * con un nombre generico para que el módulo serial
 * cree el numero autoincremental como identificacion
 * del requerimiento interno del sitio.
 */

function govi_sdqs_create_log_node() {

    global $user;

    $node = new stdClass();
    $node->type = 'sdqs_logs';

    $node->title = 'Requerimiento sin iniciar';
    node_object_prepare($node);

    $node->language = LANGUAGE_NONE;
    $node->uid = $user->uid;
    $node->status = 0;
    $node->promote = 0;
    $node->comment = 0;

    node_save($node);
    return $node->nid;
}
function govi_sdqs_obtener_info_ciudades($form, $form_state) {
    $departamento = $form_state['values']['departamento'];
    $cities = variable_get('sdqs_cities');
    $form['datos_personales']['ciudad']['#options'] = $cities[$departamento];
    return $form['datos_personales']['ciudad'];
}
/**
 * Método que actualiza los detalles del
 * requerimiento en el nodo previamente creado
 * actualizando el titulo genérico con el
 * identificador interno del requerimiento en
 * el sitio.
 */

function govi_sdqs_log_event($form_state, $nid_log, $result, $error = FALSE) {

    drupal_set_message('Actualizando log de eventos');

    $node = node_load($nid_log);

    $node->title = 'Requerimiento Radicado No.'. $node->field_sdqs_log_count['und'][0]['value'];
    $node->field_sdqs_fecha_radicacion['und'][0]['value'] = format_date(REQUEST_TIME, 'long');
    $node->field_sdqs_correo_peticionario['und'][0]['value'] = $form_state['values']['correo_electronico'];
    $node->field_sdqs_tipo_id['und'][0]['value'] = $form_state['values']['tipo_identificacion'];
    $node->field_sdqs_id_peticionario['und'][0]['value'] = $form_state['values']['numero_identificacion'];
    $node->field_sdqs_numero['und'][0]['value'] = $result->return->codigoRequerimiento;
    $node->field_sdqs_codigo_respuesta = "OK";

    node_save($node);
}
function splitName($name){
    $names = explode(' ', $name);
    $lastname = $names[count($names) - 1];
    unset($names[count($names) - 1]);
    $firstname = join(' ', $names);
    return Array($firstname, $lastname);
}
